{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","index.js"],"names":["InfoBox","title","isRed","cases","total","active","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","hex","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","prettyPrintStat","stat","numeral","format","showDataOnMap","casesType","map","country","Circle","weight","center","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","Map","countries","zoom","TileLayer","url","attribution","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","getCountriesData","onCountryChange","event","countryCode","target","console","log","FormControl","Select","onChange","variant","MenuItem","e","todayCases","todayRecovered","todayDeaths","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3801a390.chunk.js","sourcesContent":["import React from \"react\";\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\nimport \"./InfoBox.css\";\n\nfunction InfoBox({ title, isRed, cases, total, active, ...props }) {\n  return (\n    <Card\n      onClick={props.onClick}\n      className={`infoBox ${active && \"infoBox--selected\"} ${\n        isRed && \"infoBox--red\"\n      }`}\n    >\n      <CardContent>\n        <Typography className=\"infoBox__title\" color=\"textSecondary\">\n          {title}\n        </Typography>\n        <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>\n          {cases}\n        </h2>\n        <Typography className=\"infoBox__total\" color=\"textSecondary\">\n          {total} Total\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default InfoBox;\n","import React from \"react\";\nimport { Circle, Popup } from \"react-leaflet\";\nimport numeral from \"numeral\";\n\nconst casesTypeColors = {\n  cases: {\n    hex: \"#CC1034\",\n    multiplier: 300,\n  },\n  recovered: {\n    hex: \"#7dd71d\",\n    multiplier: 300,\n  },\n  deaths: {\n    // hex: \"#fb4443\",\n    hex: \"#ff0100\",\n    multiplier: 1500,\n  },\n};\n\nexport const sortData = (data) => {\n  const sortedData = [...data];\n  sortedData.sort((a, b) => b.cases - a.cases);\n  return sortedData;\n};\n\nexport const prettyPrintStat = (stat) =>\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\n\nexport const showDataOnMap = (data, casesType = \"cases\") =>\n  data.map((country) => (\n    <Circle\n      weight={0.5}\n      center={[country.countryInfo.lat, country.countryInfo.long]}\n      fillOpacity={0.5}\n      color={casesTypeColors[casesType].hex}\n      fillColor={casesTypeColors[casesType].hex}\n      radius={\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\n      }\n    >\n      <Popup>\n        <div className=\"info-container\">\n          <div\n            className=\"info-flag\"\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\n          />\n          <div className=\"info-name\">{country.country}</div>\n          <div className=\"info-confirmed\">\n            Cases: {numeral(country.cases).format(\"0,0\")}\n          </div>\n          <div className=\"info-recovered\">\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\n          </div>\n          <div className=\"info-deaths\">\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\n          </div>\n        </div>\n      </Popup>\n    </Circle>\n  ));\n","import React from \"react\";\nimport \"./Map.css\";\nimport { Map as MapContainer, TileLayer } from \"react-leaflet\";\nimport { showDataOnMap } from \"./util\";\n\nfunction Map({ countries, casesType, center, zoom }) {\n  return (\n    <div className=\"map\">\n      <MapContainer center={center} zoom={zoom}>\n        <TileLayer\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        />\n        {showDataOnMap(countries, casesType)}\n      </MapContainer>\n    </div>\n  );\n}\n\nexport default Map;\n","import React from \"react\";\nimport \"./Table.css\";\nimport numeral from 'numeral'\n\nfunction Table({ countries }) {\n  return (\n    <div className=\"table\">\n      {countries.map(({ country, cases }) => {\n        return (\n          <tr>\n            <td>{country}</td>\n            <td>\n              <strong>{numeral(cases).format(\"0,0\")}</strong>\n            </td>\n          </tr>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default Table;\n","import React, { useEffect, useState } from \"react\";\nimport { Line } from \"react-chartjs-2\";\nimport numeral from \"numeral\";\n\nconst options = {\n  legend: {\n    display: false,\n  },\n  elements: {\n    point: {\n      radius: 0,\n    },\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    mode: \"index\",\n    intersect: false,\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return numeral(tooltipItem.value).format(\"+0,0\");\n      },\n    },\n  },\n  scales: {\n    xAxes: [\n      {\n        type: \"time\",\n        time: {\n          format: \"MM/DD/YY\",\n          tooltipFormat: \"ll\",\n        },\n      },\n    ],\n    yAxes: [\n      {\n        gridLines: {\n          display: false,\n        },\n        ticks: {\n          // Include a dollar sign in the ticks\n          callback: function (value, index, values) {\n            return numeral(value).format(\"0a\");\n          },\n        },\n      },\n    ],\n  },\n};\n\nconst buildChartData = (data, casesType) => {\n  let chartData = [];\n  let lastDataPoint;\n  for (let date in data.cases) {\n    if (lastDataPoint) {\n      let newDataPoint = {\n        x: date,\n        y: data[casesType][date] - lastDataPoint,\n      };\n      chartData.push(newDataPoint);\n    }\n    lastDataPoint = data[casesType][date];\n  }\n  return chartData;\n};\n\nfunction LineGraph({ casesType = \"cases\", ...props }) {\n  const [data, setData] = useState({});\n\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\n        .then((response) => {\n          return response.json();\n        })\n        .then((data) => {\n          let chartData = buildChartData(data, casesType);\n          setData(chartData);\n        });\n    };\n\n    fetchData();\n  }, [casesType]);\n\n  return (\n    <div className={props.className}>\n      {data.length > 0 && (\n        <Line\n          options={options}\n          data={{\n            datasets: [\n              {\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\n                borderColor: \"#CC1034\",\n                data: data,\n              },\n            ],\n          }}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default LineGraph;\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport {\n  MenuItem,\n  FormControl,\n  Select,\n  Card,\n  CardContent,\n} from \"@material-ui/core\";\nimport InfoBox from \"./InfoBox\";\nimport Map from \"./Map\";\nimport Table from \"./Table\";\nimport LineGraph from \"./LineGraph\";\nimport { sortData, prettyPrintStat } from \"./util\";\nimport \"leaflet/dist/leaflet.css\";\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState([23.685, 90.3563]);\n  const [mapZoom, setMapZoom] = useState(4);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((response) => response.json())\n      .then((data) => {\n        setCountryInfo(data);\n      });\n  }, []);\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country,\n            value: country.countryInfo.iso2,\n          }));\n\n          const sortedData = sortData(data);\n          setTableData(sortedData);\n          setMapCountries(data);\n          setCountries(countries);\n        });\n    };\n    getCountriesData();\n  }, []);\n\n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value;\n\n    const url =\n      countryCode === \"worldwide\"\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n    await fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        setCountry(countryCode);\n        setCountryInfo(data);\n        console.log(countryInfo);\n        setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        setMapZoom(5);\n      });\n  };\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>COVID-19 TRACKER</h1>\n          <FormControl className=\"app__dropdown\">\n            <Select\n              onChange={onCountryChange}\n              variant=\"outlined\"\n              value={country}\n            >\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {countries.map((country) => {\n                return (\n                  <MenuItem value={country.value}>{country.name}</MenuItem>\n                );\n              })}\n            </Select>\n          </FormControl>\n        </div>\n        <div className=\"app__stats\">\n          <InfoBox\n            isRed\n            active={casesType === \"cases\"}\n            onClick={(e) => setCasesType(\"cases\")}\n            title=\"Coronavirus Cases\"\n            cases={prettyPrintStat(countryInfo.todayCases)}\n            total={prettyPrintStat(countryInfo.cases)}\n          />\n          <InfoBox\n            active={casesType === \"recovered\"}\n            onClick={(e) => setCasesType(\"recovered\")}\n            title=\"Recovered\"\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\n            total={prettyPrintStat(countryInfo.recovered)}\n          />\n          <InfoBox\n            isRed\n            active={casesType === \"deaths\"}\n            onClick={(e) => setCasesType(\"deaths\")}\n            title=\"Deaths\"\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\n            total={prettyPrintStat(countryInfo.deaths)}\n          />\n        </div>\n\n        <Map\n          casesType={casesType}\n          countries={mapCountries}\n          center={mapCenter}\n          zoom={mapZoom}\n        />\n      </div>\n      <Card className=\"app__right\">\n        <CardContent>\n          <h3>Live cases by country</h3>\n          <Table countries={tableData} />\n          <h3 className=\"app__graphTitle\">Worldwide new {casesType}</h3>\n          <LineGraph className=\"app__graph\" casesType={casesType} />\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}